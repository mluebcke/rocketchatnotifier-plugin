#!groovy

// only 20 builds
properties([
  disableConcurrentBuilds(),
  buildDiscarder(logRotator(artifactNumToKeepStr: '20', numToKeepStr: '20'))
])

node('docker') {

  def buildNumber = env.BUILD_NUMBER
  def workspace = env.WORKSPACE
  def buildUrl = env.BUILD_URL

  // PRINT ENVIRONMENT TO JOB
  echo "workspace directory is $workspace"
  echo "build URL is $buildUrl"
  echo "build Number is $buildNumber"
  echo "PATH is $env.PATH"

  try {
    stage('Checkout') {
      checkout scm
    }

    stage('Build') {
      sh "mvn clean install -U"
    }

    stage('Prepare Docker Images') {
      // build docker images
      sh "./docker-build-images.sh"
      // run images
      sh "./docker-run.sh"
    }

    stage('Test') {
      try {
        sh "mvn -Pdocker -Djava.awt.headless=true -Dmaven.test.redirectTestOutputToFile=true -Dcobertura.report.format=xml --fail-at-end --batch-mode clean cobertura:cobertura verify"
      } finally {
        sh "./docker-stop.sh"
        junit testResults: 'target/surefire-reports/TEST-*.xml,target/failsafe-reports/TEST-*.xml'
        archiveArtifacts artifacts: 'target/*.hpi'
        step([$class: 'CoberturaPublisher', autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'target/site/cobertura/coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false])
        publishHTML(target: [
          reportDir            : 'target/site/cobertura/',
          reportFiles          : 'index.html',
          reportName           : 'Code Coverage Test Report',
          keepAll              : true,
          alwaysLinkToLastBuild: true,
          allowMissing         : false
        ])
      }
    }

    stage('Deploy') {
      sshagent(credentials: ['github-hypery2k']) {
        def projectVersion = projectVersion()
        if (projectVersion && !projectVersion.contains('SNAPSHOT')) {
          // release build
          sh "mvn deploy -DskipTests=true"
          // nightly build
        } else {
          sh "mvn deploy -DskipTests=true -DartifactSuffix=-alpha"
        }
      }
    }
  } catch (e) {
    mail subject: 'Error on build', to: 'github@martinreinhardt-online.de', body: "Please go to ${env.BUILD_URL}."
    throw e
  }

}

def projectVersion() {
  def file = readFile('pom.xml')
  def project = new XmlSlurper().parseText(file)
  return project.version.text()
}
